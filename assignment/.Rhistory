df$sheet <- file
return(df)
}
month_columns <- function(colnames) {
month_colnames <- grepl('^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)-[0-9]{2}$', colnames)
return(colnames[month_colnames])
}
get_lookup_country <- function(conn) {
lookup_country <- dbGetQuery(get_db_conn(), 'SELECT name as country_name, name as sfdc_country_name, id as sfdc_country_id FROM v_lookup_country')
names(lookup_country) <- tolower(names(lookup_country))
return(lookup_country)
}
get_lookup_gan <- function(conn) {
# gan is converted to character so that the left_join below may work properly
lookup_gan <- dbGetQuery(get_db_conn(), 'SELECT to_char(gan) as gan, name1 as sfdc_account_name, id as sfdc_account_id FROM lookup_gan')
names(lookup_gan) <- tolower(names(lookup_gan))
return(lookup_gan)
}
map_gan_and_country <- function(ds, lookup_country, lookup_gan) {
ds <- left_join(ds, lookup_country, by = c('country_name' = 'country_name'))
ds <- left_join(ds, lookup_gan, by = c('gan' = 'gan'))
return(ds)
}
lookup_country <- get_lookup_country()
lookup_gan <- get_lookup_gan()
revenue <- load_data_file('revenue')
costs <- load_data_file('costs')
connections <- load_data_file('connections')
usage <- load_data_file('usage')
mrevenue <- map_gan_and_country(revenue, lookup_country, lookup_gan)
mcosts <- map_gan_and_country(costs, lookup_country, lookup_gan)
mconnections <- map_gan_and_country(connections, lookup_country, lookup_gan)
musage <- map_gan_and_country(usage, lookup_country, lookup_gan)
account_cols <- c('sheet', 'gan', 'gan_account_name', 'sfdc_account_id')
unmapped_accounts <- rbind(mrevenue[, account_cols], mcosts[, account_cols], mconnections[, account_cols], musage[, account_cols]) %>% filter(is.na(sfdc_account_id)) %>% distinct()
if (nrow(unmapped_accounts) > 0) {
print("WARNING: UNMAPPED ACCOUNTS!")
print(unmapped_accounts)
stop("Please review before continuing.")
}
mrevenue <- map_gan_and_country(revenue, lookup_country, lookup_gan)
str(revenue)
library(ROracle)
library(readr)
library(stringr)
library(reshape2)
library(dplyr)
Sys.setenv(TZ = "UTC")
Sys.setenv(ORA_SDTZ = "UTC")
Sys.setenv(NLS_LANG = '.AL32UTF8')
get_db_conn <- function(drv) {
dbConnect(dbDriver("Oracle"), 'pillar_staging', 'p1ll4R_stag1ng_MEOW', '(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracle.integration.cloudns.biz)(PORT=1521))(CONNECT_DATA=(SID=STAGING)))')
}
upload_table <- function(table_name, ds) {
names(ds) <- toupper(names(ds))
table_name <- toupper(table_name)
print(str_c('Uploading table ', table_name, ' (', nrow(ds), ' rows)'))
dbWriteTable(get_db_conn(), table_name, ds, row.names = FALSE, overwrite = TRUE, append = FALSE)
}
load_data_file <- function(file) {
data_file_path <- '~/repos/agileetl/adair/csv/'
file_name <- str_c(data_file_path, file, '.csv')
print(str_c("Reading file ", file_name))
df <- read_csv(file_name)
names(df) <- tolower(names(df))
names(df) <- str_replace(names(df), '/', '_')
names(df) <- str_replace(names(df), ' ', '_')
month_colnames <- month_columns(names(df))
df <- df[!is.na(names(df))] # strip columns with NA headings
df <- df %>% mutate(
gan = str_replace(gan, 'VGE', ''),
vge_billed = ifelse(grepl('^(MNS|VGEL)', toupper(country_name)), 'CENTRAL', 'LOCAL'),
mns = ifelse(grepl('^MNS', toupper(country_name)), 1, 0)
)
df <- melt(df, measure.vars = month_colnames, variable.name = 'month')
df$month <- as.Date(str_c("01-", df$month), "%d-%b-%y")
# we only care about 01-APR-2015 and onwards
df <- df %>% filter(month >= as.Date('2015-04-01'))
df$sheet <- file
return(df)
}
month_columns <- function(colnames) {
month_colnames <- grepl('^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)-[0-9]{2}$', colnames)
return(colnames[month_colnames])
}
get_lookup_country <- function(conn) {
lookup_country <- dbGetQuery(get_db_conn(), 'SELECT name as country_name, name as sfdc_country_name, id as sfdc_country_id FROM v_lookup_country')
names(lookup_country) <- tolower(names(lookup_country))
return(lookup_country)
}
get_lookup_gan <- function(conn) {
# gan is converted to character so that the left_join below may work properly
lookup_gan <- dbGetQuery(get_db_conn(), 'SELECT to_char(gan) as gan, name1 as sfdc_account_name, id as sfdc_account_id FROM lookup_gan')
names(lookup_gan) <- tolower(names(lookup_gan))
return(lookup_gan)
}
map_gan_and_country <- function(ds, lookup_country, lookup_gan) {
ds <- left_join(ds, lookup_country, by = c('country_name' = 'country_name'))
ds <- left_join(ds, lookup_gan, by = c('gan' = 'gan'))
return(ds)
}
lookup_country <- get_lookup_country()
lookup_gan <- get_lookup_gan()
revenue <- load_data_file('revenue')
str(revenue)
mrevenue <- map_gan_and_country(revenue, lookup_country, lookup_gan)
costs <- load_data_file('costs')
connections <- load_data_file('connections')
usage <- load_data_file('usage')
mcosts <- map_gan_and_country(costs, lookup_country, lookup_gan)
mconnections <- map_gan_and_country(connections, lookup_country, lookup_gan)
musage <- map_gan_and_country(usage, lookup_country, lookup_gan)
account_cols <- c('sheet', 'gan', 'gan_account_name', 'sfdc_account_id')
unmapped_accounts <- rbind(mrevenue[, account_cols], mcosts[, account_cols], mconnections[, account_cols], musage[, account_cols]) %>% filter(is.na(sfdc_account_id)) %>% distinct()
if (nrow(unmapped_accounts) > 0) {
print("WARNING: UNMAPPED ACCOUNTS!")
print(unmapped_accounts)
stop("Please review before continuing.")
}
upload_table('revenue', mrevenue)
upload_table('costs', mcosts)
upload_table('connections', mconnections)
upload_table('usage', musage)
load_filename <- "vgeafrica-central-reports-for-mea-201602121453.csv"
load_dir <- "~/vodafone/VGEart"
######## do not edit below this line unless you know what you're doing
get_ts_from_filename <- function(filename) {
e <- gsub("[^0-9]", "", load_filename)
ts <- as.POSIXct(e, format = "%Y%m%d%H%M")
return(ts)
}
library('ROracle')
library('dplyr')
db_conn_str = "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracle.integration.cloudns.biz)(PORT=1521))(CONNECT_DATA=(SID=STAGING)))"
db_user = "pillar_staging"
db_pass = "p1ll4R_stag1ng_MEOW"
Sys.setenv(TZ = "UTC")
Sys.setenv(ORA_SDTZ = "UTC")
db_driver = dbDriver("Oracle")
sa = read.csv(paste(load_dir, load_filename, sep = "/"), sep=",", header=TRUE)
sa_names = make.names(names(sa))
sa_names = toupper(sa_names)
sa_names[22] = "OPP.STAGE.DUR.NO.OF.DAYS"
sa_names = gsub('\\.', '_', sa_names)
sa_names = gsub('^OPPORTUNITY_ID$', 'GER_ID', sa_names)
sa_names = gsub('^REGION$', 'ACCOUNT_REGION', sa_names)
sa_names = gsub('^SUB_REGION$', 'ACCOUNT_SUB_REGION', sa_names)
sa_names = gsub('^ACCOUNT_OWNER$', 'ACCOUNT_OWNER_NAME', sa_names)
sa_names = gsub('^OPPORTUNITY_OWNER$', 'OPPORTUNITY_OWNER_NAME', sa_names)
sa_names = gsub('^COUNTRY$', 'COUNTRY_NAME', sa_names)
sa_names = gsub('^SALES_REGION$', 'COUNTRY_REGION', sa_names)
sa_names = gsub('^LAST_CHANGED$', 'LAST_CHANGED_DATE', sa_names)
sa_names = gsub('^OPP_STAGE_DUR_NO_OF_DAYS$', 'OPPORTUNITY_IN_STAGE_DURATION', sa_names)
sa_names = gsub('^IN_YEAR_NEW_REVENUE$', 'IN_YEAR_REVENUE', sa_names)
sa_names = gsub('^NEXT_STEP_CURRENT_SITUATION$', 'NEXT_STEPS', sa_names)
names(sa) = sa_names
sa$CREATED_DATE = as.Date(sa$CREATED_DATE, "%m/%d/%Y")
sa$CLOSE_DATE = as.Date(sa$CLOSE_DATE, "%m/%d/%Y")
sa$LAST_CHANGED_DATE = as.Date(sa$LAST_CHANGED_DATE, "%m/%d/%Y")
sa$REVENUE_START_DATE = as.Date(sa$REVENUE_START_DATE, "%m/%d/%Y")
sa$PROBABILITY = as.numeric(gsub('%', '', sa$PROBABILITY))
sa$NEW_BUSINESS_TCV = as.numeric(sa$NEW_BUSINESS_TCV)
sa$IN_YEAR_REVENUE = as.numeric(sa$IN_YEAR_REVENUE)
sa$RESIGN_TCV = as.numeric(sa$RESIGN_TCV)
sa$IN_YEAR_RESIGN_REVENUE = as.numeric(sa$IN_YEAR_RESIGN_REVENUE)
sa$SNAPSHOT_DATE = get_ts_from_filename(load_filename)
sa$UPLOAD_DATE = Sys.time()
# make UPLOAD_DATE the first column
sa = cbind(select(sa, UPLOAD_DATE), select(sa, -UPLOAD_DATE))
sa = filter(sa, DATA_SOURCE != 'SFDC')
conn = dbConnect(db_driver, username=db_user, password=db_pass, dbname=db_conn_str)
dbWriteTable(conn, "VGEART_AFRICA_STAGING", sa, row.names=FALSE, overwrite=TRUE)
dbSendQuery(conn, "alter table VGEART_AFRICA_STAGING modify created_date date")
dbSendQuery(conn, "alter table VGEART_AFRICA_STAGING modify close_date date")
dbSendQuery(conn, "alter table VGEART_AFRICA_STAGING modify last_changed_date date")
dbSendQuery(conn, "alter table VGEART_AFRICA_STAGING modify revenue_start_date date")
dbSendQuery(conn, "alter table VGEART_AFRICA_STAGING modify upload_date date")
dbSendQuery(conn, "insert into VGEART_AFRICA_MANUAL select * from VGEART_AFRICA_STAGING")
dbSendQuery(conn, "commit")
conn = NULL
library(ROracle)
library(RNeo4j)
library(dplyr)
library(igraph)
library(lubridate)
Sys.setenv(TZ = "UTC")
Sys.setenv(ORA_SDTZ = "UTC")
Sys.setenv(NLS_LANG = '.AL32UTF8')
getgraph <- function() {
graph <- startGraph('http://192.168.99.100:7474/db/data', username = 'neo4j', password = 'test')
return(graph)
}
get_db_conn <- function(drv) {
dbConnect(dbDriver("Oracle"), 'pillar_staging', 'p1ll4R_stag1ng_MEOW', '(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracle.integration.cloudns.biz)(PORT=1521))(CONNECT_DATA=(SID=STAGING)))')
}
dbquery <- function(dbc, q) {
r <- dbGetQuery(dbc, q)
names(r) <- tolower(names(r))
return(r)
}
graph <- getgraph()
dbc <- get_db_conn()
employees <- dbquery(dbc, "SELECT u.* FROM app_cmi_dev.users u")
write.csv(employees, "csv/employees.csv", row.names = FALSE)
countries <- dbquery(dbc, "SELECT c.* FROM app_cmi_dev.countries c")
write.csv(countries, "csv/countries.csv", row.names = FALSE)
accounts <- dbquery(dbc, "SELECT a.* FROM app_cmi_dev.accounts a")
write.csv(accounts, "csv/accounts.csv", row.names = FALSE)
products <- dbquery(dbc, "SELECT DISTINCT product_name AS name from app_cmi_dev.lois_revenue")
write.csv(products, "csv/products.csv", row.names = FALSE)
markets <- dbquery(dbc, "SELECT DISTINCT market AS name from app_cmi_dev.lois_revenue")
write.csv(markets, "csv/markets.csv", row.names = FALSE)
billingtypes <- dbquery(dbc, "SELECT DISTINCT billing_type AS name from app_cmi_dev.lois_revenue")
write.csv(markets, "csv/billingtypes.csv", row.names = FALSE)
pkgs <- c(
"broom", "dplyr", "ggplot2", "jsonlite", "Lahman", "purrr",
"rcorpora", "readr", "rmarkdown", "stringr", "tibble", "tidyr"
)
install.packages(pkgs)
source('config/config.R')
source('helpers/datasets.R')
roamers <- get_roamers()
roamers <- na.omit(roamers)
edges <- roamers
vpc <- read.csv("~/Desktop/vge_product_categories.csv")
vpc
View(vpc)
db_conn_str <- "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oracle.integration.cloudns.biz)(PORT=1521))(CONNECT_DATA=(SID=STAGING)))"
db_user <- "PILLAR_TCV"
db_pass <- "4obwsvdL"
drv <- getDriver("Oracle")
library("ROracle")
drv <- getDriver("Oracle")
drv <- dbDriver("Oracle")
get_db_conn = function() {
conn = dbConnect(drv, doyka$db_user, doyka$db_pass, doyka$db_conn_str)
return(conn)
}
store_df_in_db = function(df, table_name) {
df = as.data.frame(df)
names(df) = toupper(names(df))
table_name = toupper(table_name)
conn = get_db_conn()
dbWriteTable(conn, toupper(table_name), df, row.names = FALSE, overwrite = TRUE)
conn = NULL
}
get_db_conn <- function() { return(dbConnect(drv, "pillar_tcv", "4obwsvdL", db_conn_str))}
conn <- get_db_conn()
get_db_conn <- function() { return(dbConnect(drv, "pillar_tcv", "P1ll4r_P4ss", db_conn_str))}
conn <- get_db_conn()
store_df_in_db(vpc, "VGE_PRODUCT_CATEGORIES")
library(readr)
library(feather)
library(dplyr)
rm(list = ls())
vge_bill <- read_csv("data/vge_bill.csv")
vge_code <- read_csv("data/vge_code.csv")
names(vge_bill) <- tolower(names(vge_bill))
names(vge_code) <- tolower(names(vge_code))
vge_bill_stripped <- vge_bill %>% select(bill_key, country_id)
source("config.R")
library(ROracle)
?dbWriteTable
df <- (a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
df
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
df
nrow(df) / 3
nrow(df) // 3
nrow(df) % 3
mod(nrow(df), 3)
div(nrow(df), 3)
nrow(df), 3
nrow(df) / 3
as.integer(nrow(df) / 3)
as.integer(floor(nrow(df) / 3))
df %>% group_by(a / 3)
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
df %>% group_by(a / 3)
df %>% group_by(as.integer(a / 3))
df %>% group_by(as.integer(n() / 3))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print(nrow(d))
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
return(TRUE)
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
return(data.frame())
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print(nrow(d))
return(data.frame())
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
# print(nrow(d))
return(data.frame())
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
df %>% group_by(as.integer(n() / 3))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print("mrow")
return(data.frame())
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print("mrow")
return(d)
}
df %>% group_by(as.integer(n() / 3)) %>% do(process_part(.))
df %>% mutate(_rownum = 1:()) %>% group_by(as.integer(_rownum / 3)) %>% do(process_part(.))
df %>% mutate(rownum__ = 1:()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print("mrow")
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
d <- d[, 1:ncol(d)-2]
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
d <- d[, 1:ncol(d)]
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
d <- d[, 1:ncol(d)-1]
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
d <- d[, 1:ncol(d)-2]
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
library(dplyr)
df <- data.frame(a = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
process_part <- function(d) {
d <- d[, 1:ncol(d)-1]
d <- d[, 1:ncol(d)-1]
print(names(d))
return(d)
}
df %>% mutate(rownum__ = 1:n()) %>% group_by(as.integer(rownum__ / 3)) %>% do(process_part(.))
# this is no solution really, just what we had in the paper plus some plotting.
# to do the exercise one must find the maximum without optimize()
myfunction <- function(t) (1 + 2.5*t) * exp(-0.3 * t)
x <- seq(-1, 30, by = 0.1) # [1] -1.0 -0.9 -0.8 -0.7 -0.6 -0.5
y <- round(myfunction(x), 6) # [1] -2.024788 -1.637456 -1.271249 -0.925259 -0.598609 -0.290459 ...
# find the maximum value of y for -1 < x < 10
o <- optimize(myfunction, lower = -1, upper = 10, maximum = TRUE)
o$maximum <- round(o$maximum, 6)
print(paste0("Maximum: ", o$maximum))
# some plotting
library(ggplot2) # if this produces an error, run the following and retry: install.packages("ggplot2")
df <- data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_line() +
geom_point(data = data.frame(x = o$maximum, y = myfunction(o$maximum)), colour = "red") +
ylab("myfunction(x)")
x <- seq(-3, 2, 0.1)
y <- pol(x)
pol <- function(t) (1 + 2.5*t) * exp(-0.3 * t)
x <- seq(-3, 2, 0.1)
y <- pol(x)
x1 <- round(get_x_init(-2), 6)
get_x_init <- function(x_init) {
result <- x_init - (grad(x_init) / hess(x_init))
if (abs(result - x_init) < 0.001) {
return(result)
}
get_x_init(result)
}
x1 <- round(get_x_init(-2), 6)
myfunction <- function(t) (1 + 2.5*t) * exp(-0.3 * t)
x <- seq(-1, 30, by = 0.1) # [1] -1.0 -0.9 -0.8 -0.7 -0.6 -0.5
y <- round(myfunction(x), 4) # [1] -2.024788 -1.637456 -1.271249 -0.925259 -0.598609 -0.290459 ...
y
y
# find the maximum value of y
o <- optimize(myfunction, maximum = TRUE)
myfunction <- function(t) (1 + 2.5*t) * exp(-0.3 * t)
x <- seq(-1, 30, by = 0.1)
y <- round(myfunction(x), 4)
# find the maximum value of y for -1 < x < 10
o <- optimize(myfunction, lower = min(y), upper = max(y), maximum = TRUE)
o$maximum <- round(o$maximum, 6)
print(paste0("Maximum: ", o$maximum))
# some plotting
library(ggplot2) # if this produces an error, run the following and retry: install.packages("ggplot2")
df <- data.frame(x = x, y = y)
ggplot(df, aes(x = x, y = y)) +
geom_line() +
geom_point(data = data.frame(x = o$maximum, y = myfunction(o$maximum)), colour = "red") +
ylab("myfunction(x)")
plot(x, y, type = 'l')
ln(0)
log(0)
tan(0)
tan(0 * 180/pi)
log(1)
sin(0)
sin(0 * pi/180)
cos(pi/2 * pi/180)
cos(pi/2)
cos(pi/2 * pi/180)
cos(0)
cos(0 * pi/180)
log(1)
x <- seq(0.1, 1, by = 0.01)
y <- 1/x
plot(x, y)
x <- seq(-1, 1, by = 0.01)
y <- 1/x
plot(x,y)
library(deSolve)
install.packages(deSolve)
install.packages("deSolve")
library(deSolve)
Ovini <- c(O = 1,v =0)
derivs1 <- function(t,O,v,parmameters) {
with(as.list(c(O,v,parameters)), {
dO <- v
dv <- (1 - b*v - cc*O)/a
list(c(dO,dv))
})
}
parameters <- c(a = 1, b = 4, cc = 3)
times <- seq(from = 0, to = 8,by = 0.1)
out1 <- ode(y = Ovini, times = times, func = derivs1, parms = parameters )
out1
O.f <- function(t)(1/3 + e^(-t) - (1/3)e^(-3t))
plot(O.f, from = 0, to = 8, by = 0.1)
O.f <- function(t)(1/3 + e^(-t) - (1/3)e^(-3t))
plot(O.f, from = 0, to = 8, by = 0.1)
O.f <- function(t)(1/3 + e^(-t) - (1/3)e^(-3t))
O.f <- function(t)(1/3 + e^(-t) - (1/3)*e^(-3t))
O.f <- function(t) 1/3 + e^(-t) - (1/3)*e^(-3t)
O.f <- function(t) 1/3 + e^(-t) - (1/3)*e^(-3*t)
plot(O.f, from = 0, to = 8, by = 0.1)
library(deSolve)
Ovini <- c(O = 1,v =0)
derivs1 <- function(t,O,v,parmameters) {
with(as.list(c(O,v,parameters)), {
dO <- v
dv <- (1 - b*v - cc*O)/a
list(c(dO,dv))
})
}
parameters <- c(a = 1, b = 4, cc = 3)
times <- seq(from = 0, to = 8,by = 0.1)
out1 <- ode(y = Ovini, times = times, func = derivs1, parms = parameters )
O.f <- function(t)(1/3 + e^(-t) - (1/3)e^(-3t))
plot(O.f, from = 0, to = 8, by = 0.1)
library(deSolve)
Ovini <- c(O = 1,v =0)
derivs1 <- function(t,O,v,parmameters) {
with(as.list(c(O,v,parameters)), {
dO <- v
dv <- (1 - b*v - cc*O)/a
list(c(dO,dv))
})
}
parameters <- c(a = 1, b = 4, cc = 3)
times <- seq(from = 0, to = 8,by = 0.1)
out1 <- ode(y = Ovini, times = times, func = derivs1, parms = parameters )
O.f <- function(t)(1/3 + e^(-t) - (1/3)e^(-3t))
plot(O.f, from = 0, to = 8, by = 0.1)
setwd("~/repos/uor_csmdm16/assignment/")
setwd("~/repos/uor_csmdm16/assignment/")
